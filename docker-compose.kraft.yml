services:
  kafka:
    image: confluentinc/cp-kafka:8.0.1
    healthcheck:
      test: kafka-topics --bootstrap-server kafka:9092 --list
      interval: 1s
      timeout: 10s
      retries: 3
    environment:
      CLUSTER_ID: "qHn69ttlR7ahbCvD3WsLlw"
      KAFKA_PROCESS_ROLES: "broker,controller"
      KAFKA_NODE_ID: 1
      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@kafka:9093"
      KAFKA_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
      KAFKA_LISTENERS: "PLAINTEXT://kafka:9092,CONTROLLER://kafka:9093,PLAINTEXT_HOST://0.0.0.0:9094"
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9093"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT"
      KAFKA_LOG_DIRS: "/var/lib/kafka/data"
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
    ports:
      - "9092:9092"      # Для внутреннего общения (PLAINTEXT)
      - "9093:9094"      # Для внешнего общения (PLAINTEXT_HOST) - Изменено: хост 9093 -> контейнер 9094
      - "9101:9101"      # JMX порт
    volumes:
      - kafka-data:/var/lib/kafka/data
      - kafka-secrets:/etc/kafka/secrets

  kafdrop:
    image: obsidiandynamics/kafdrop:4.0.1
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: "kafka:9092"
      JVM_OPTS: "-Xms32M -Xmx64M"
    depends_on:
      - kafka

  db:
    image: postgres:18.0
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    # set shared memory limit when using docker compose
    shm_size: 128mb
    volumes:
      - postgresql_data:/var/lib/postgresql/data
    env_file:
      - .env    
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
  
  receiver:
    build: receiver/
    restart: unless-stopped
    env_file:
      - .env
    depends_on:
      kafka:
        condition: service_healthy 
    ports:
      - "8000:8000"
    develop:
      # Create a `watch` configuration to update the app
      # https://docs.docker.com/compose/file-watch/#compose-watch-versus-bind-mounts
      watch:
        # Sync the working directory with the `/app` directory in the container
        - action: sync
          path: /receiver
          target: /app
          # Exclude the project virtual environment — it could be for a
          # different platform in the container
          ignore:
            - .venv/

        # Rebuild the image if dependencies change by checking uv.lock
        - action: rebuild
          path: ./uv.lock
  
  processor:
    build: processor/
    restart: unless-stopped
    env_file:
      - .env
    depends_on:
      kafka:
        condition: service_healthy
      db: 
        condition: service_healthy
  

volumes:
  postgresql_data:
  kafka-data:
  kafka-secrets: